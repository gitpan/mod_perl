=head1 NAME

Migrating from mod_perl 1.0 to mod_perl 2.0

=head1 Description

This chapter explains how to port code and configuration files from
mod_perl 1.0 to mod_perl 2.0.

As will be explained in details later loading C<Apache::compat> at the
server startup, should make the code running properly under 1.0 work
under mod_perl 2.0. If you want to port your code to mod_perl 2.0 or
writing from scratch and not concerned about backwards compatibility,
this document explains what has changed compared to mod_perl 1.0.

Several configuration directives were changed, renamed or
removed. Several APIs have changed, renamed, removed, or moved to new
packages.  Certain functions while staying exactly the same as in
mod_perl 1.0, now reside in different packages. Before using them you
need to find out those packages and load them.

You should be able to find the destiny of the functions that you
cannot find any more or which behave differently now under the package
names the functions belong in mod_perl 1.0.

See also L<additional porting
notes|docs::2.0::devel::porting::porting>, mainly oriented for the 3rd
party module and core developers.

=head1 Configuration Files Porting

To migrate the configuration files to the mod_perl 2.0 syntax, you may
need to do certain adjustments. Several configuration directives are
deprecated in 2.0, but still available for backwards compatibility
with mod_perl 1.0. If you don't need the backwards compatibility
consider using the directives that have replaced them.

=head2 C<PerlHandler>

C<PerlHandler> was replaced with C<PerlResponseHandler>.

=head2 C<PerlSendHeader>

C<PerlSendHeader> was replaced with C<PerlOptions +/-ParseHeaders>
directive.

  PerlSendHeader On  => PerlOptions +ParseHeaders
  PerlSendHeader Off => PerlOptions -ParseHeaders

=head2 C<PerlSetupEnv>

C<PerlSetupEnv> was replaced with C<PerlOptions +/-SetupEnv>
directive.

  PerlSetupEnv On  => PerlOptions +SetupEnv
  PerlSetupEnv Off => PerlOptions -SetupEnv

=head2 C<PerlTaintCheck>

The taint mode now can be turned on with:

  PerlSwitches -T

As with standard Perl, by default the taint mode is disabled and once
enabled cannot be turned off inside the code.

=head2 C<PerlWarn>

Warnings now can be enabled globally with:

  PerlSwitches -w

=head2 C<PerlFreshRestart>

C<PerlFreshRestart> is a mod_perl 1.0 legacy and doesn't exist in
mod_perl 2.0. A full teardown and startup of interpreters is done on
restart.

If you need to use the same I<httpd.conf> for 1.0 and 2.0, use:

  <IfDefine !MODPERL2>
      PerlFreshRestart
  </IfDefine>

=head2 Apache Configuration Customization

mod_perl 2.0 has slightly changed the mechanism for L<adding custom
configuration
directives|docs::2.0::user::config::custom> and now also makes it easy to 
access an Apache parsed configuration tree's values.

META: add L<> to the config tree access when it'll be written.




=head1 Code Porting

mod_perl 2.0 is trying hard to be back compatible with mod_perl
1.0. However some things (mostly APIs) have been changed. In order to
gain a complete compatibilty with 1.0 while running under 2.0, you
should load the compatibility module as early as possible:

  use Apache::compat;

at the server startup. And unless there are forgotten things or bugs,
your code should work without any changes under 2.0 series.

However, unless you want to keep the 1.0 compatibility, you should try
to remove the compatibility layer and adjust your code to work under
2.0 without it. You want to do it mainly for the performance
improvement.

This document explains what APIs have changed and what new APIs should
be used instead.

If you have mod_perl 1.0 and 2.0 installed on the same system and the
two use the same perl libraries directory (e.g. I</usr/lib/perl5>), to
use mod_perl 2.0 make sure to load first the C<Apache2> module which
will perform the necessary adjustments to C<@INC>.

  use Apache2; # if you have 1.0 and 2.0 installed
  use Apache::compat;

So if before loading C<Apache2.pm> the C<@INC> array consisted of:

  /home/stas/perl/ithread/lib/5.8.0/i686-linux-thread-multi
  /home/stas/perl/ithread/lib/5.8.0
  /home/stas/perl/ithread/lib/site_perl/5.8.0/i686-linux-thread-multi
  /home/stas/perl/ithread/lib/site_perl/5.8.0
  /home/stas/perl/ithread/lib/site_perl
  .

It will now look as:

  /home/stas/perl/ithread/lib/site_perl/5.8.0/i686-linux-thread-multi/Apache2
  /home/stas/perl/ithread/lib/5.8.0/i686-linux-thread-multi
  /home/stas/perl/ithread/lib/5.8.0
  /home/stas/perl/ithread/lib/site_perl/5.8.0/i686-linux-thread-multi
  /home/stas/perl/ithread/lib/site_perl/5.8.0
  /home/stas/perl/ithread/lib/site_perl
  .

Notice that a new directory was prepended to the search path, so if
for example the code attempts to load C<Apache::RequestRec> and there
are two versions of this module undef
I</home/stas/perl/ithread/lib/site_perl/>:

          5.8.0/i686-linux-thread-multi/Apache/RequestRec.pm
  5.8.0/i686-linux-thread-multi/Apache2/Apache/RequestRec.pm

The mod_perl 2.0 version will be loaded first, because the directory
I<5.8.0/i686-linux-thread-multi/Apache2> is coming before the
directory I<5.8.0/i686-linux-thread-multi> in C<@INC>.


=head1 C<Apache::Registry>, C<Apache::PerlRun> and Friends

C<Apache::Registry>, C<Apache::PerlRun> and other modules from the
registry family now live in the C<ModPerl::> namespace to avoid
collisions with the versions from 1.0.

To run the C<Apache::Registry> module from mod_perl 1.0 you have to
load C<Apache::compat> at the startup:

  file:startup.pl:
  ----------------
  use Apache2; # if you have 1.0 and 2.0 installed
  use Apache::compat ();
  use lib ...; # to find 1.0x Apache::Registry

then in I<httpd.conf>:

  Alias /perl /path/to/perl/scripts
  <Location /perl>
     Options +ExecCGI
     SetHandler perl-script
     PerlResponseHandler Apache::Registry
  </Location>

Notice that C<Apache::compat> has to be loaded before C<CGI.pm> if the
latter module is used.

META: complete

META: document that for now ModPerl::Registry doesn't chdir() into the
script's dir like Apache::Registry does, because chdir() affects the
whole process under threads.


=head2 C<ModPerl::RegistryLoader>

In mod_perl 1.0 it was only possible to preload scripts as
C<Apache::Registry> handlers. In 2.0 the loader can use any of the
registry classes to preload into. The old API works as before, but new
options can be passed. See the I<L<ModPerl::RegistryLoader>> manpage
for more information.


=head1 C<Apache::Constants>

C<Apache::Constants> has been replaced by three classes:

=over

=item C<L<Apache::Const|docs::2.0::api::mod_perl-2.0::Apache::Const>>

Apache constants

=item C<L<APR::Const|docs::2.0::api::mod_perl-2.0::APR::Const>>

Apache Portable Runtime constants

=item C<L<ModPerl::Const|docs::2.0::api::mod_perl-2.0::ModPerl::Const>>

mod_perl specific constants

=back

See the manpages of the respective modules to figure out which
constants they provide. (XXX: not all manpages exist yet.)

META: add the info how to perform the transition. XXX: may be write a
script, which can tell you how to port the constants to 2.0? Currently
C<Apache::compat> doesn't provide a complete back compatibility layer.

=head2 Deprecated Constants

C<REDIRECT> and similar constants have been deprecated in Apache for
years, in favor of the C<HTTP_*> names (they no longer exist Apache
2.0). mod_perl 2.0 API performs the following aliasing behind the
scenes:

     NOT_FOUND     => 'HTTP_NOT_FOUND',
     FORBIDDEN     => 'HTTP_FORBIDDEN',
     AUTH_REQUIRED => 'HTTP_UNAUTHORIZED',
     SERVER_ERROR  => 'HTTP_INTERNAL_SERVER_ERROR',
     REDIRECT      => 'HTTP_MOVED_TEMPORARILY',

but we suggest moving to use the C<HTTP_*> names. For example if
running in 1.0 compatibility mode change:

  use Apache::Constants qw(REDIRECT);

to:

  use Apache::Constants qw(HTTP_MOVED_TEMPORARILY);

This will work in both mod_perl generations.


=head2 C<SERVER_VERSION()>

C<Apache::Constants::SERVER_VERSION()> has been replaced with:

  Apache::get_server_version();

=head2 C<export()>

C<Apache::Constants::export()> has no replacement in 2.0 as it's not
needed.





=head1 C<Apache::> Methods

=head2 C<Apache-E<gt>server>

C<Apache-E<gt>server> now resides in C<Apache::ServerUtil>. To use it
add:

  use Apache::ServerUtil ();

=head2 C<Apache-E<gt>request>

C<Apache-E<gt>request> is deprecated.  It's error-prone and hurts
performance when using threaded MPMs, since it has to use thread local
storage.

For any location that uses C<Apache-E<gt>request> and uses
C<"modperl"> handler, you need to configure:

  <Location ...>
      SetHandler modperl
      PerlOptions +GlobalRequest
      ...
  </Location>

It's already enabled for:

  <Location ...>
      SetHandler perl-script
      ...
  </Location>


=head2 C<Apache-E<gt>define>

C<Apache-E<gt>define> has been replaced with
C<Apache::exists_config_define()> residing inside
C<Apache::ServerUtil>.

See the
C<L<Apache::ServerUtil|docs::2.0::api::mod_perl-2.0::Apache::ServerUtil>>
manpage.

=head2 C<Apache::exit()>

C<Apache::exit()> has been replaced with C<ModPerl::Util::exit()>,
which is a function (not a method) and accepts a single optional
argument: status, whose default is 0 (== do nothing).

See the
C<L<ModPerl::Util|docs::2.0::api::mod_perl-2.0::ModPerl::Util>>
manpage.

=head2 C<Apache::gensym()>

Since Perl 5.6.1 filehandlers are autovivified and there is no need
for C<Apache::gensym()> function, since now it can be done with:

  open my $fh, "foo" or die $!;

Though the C function C<modperl_perl_gensym()> is available for XS/C
extensions writers.

=head2 C<Apache::module()>

C<Apache::module()> has been replaced with the function
C<Apache::Module::loaded()>, which now accepts a single argument: the
module name.

=head2 C<Apache::log_error()>

C<Apache::log_error()> is not available in mod_perl 2.0 API. You can
use:

  Apache->server->log_error

instead. See the
C<L<Apache::Log|docs::2.0::api::mod_perl-2.0::Apache::Log>> manpage.


=head1 C<Apache::Server::> Methods and Variables

=head2 C<$Apache::Server::CWD>

C<$Apache::Server::CWD> is deprecated and exists only in
C<Apache::compat>.

=head2 C<$Apache::Server::AddPerlVersion>

C<$Apache::Server::AddPerlVersion> is deprecated and exists only in
C<Apache::compat>.




=head1 Server Object Methods

=head2 C<$s-E<gt>register_cleanup>

C<$s-E<gt>register_cleanup> has been replaced with
C<APR::Pool::cleanup_register()> which accepts the pool object as the
first argument instead of the server object. e.g.:

  sub cleanup_callback { my $data = shift; ... }
  $s->pool->cleanup_register(\&cleanup_callback, $data);

where the last argument C<$data> is optional, and if supplied will be
passed as the first argument to the callback function.

See the C<L<APR::Pool|docs::2.0::api::mod_perl-2.0::APR::Pool>> manpage.





=head1 Request Object Methods


=head2 C<$r-E<gt>lookup_file>

See the next item

=head2 C<$r-E<gt>lookup_uri>

C<$r-E<gt>lookup_file> and C<$r-E<gt>lookup_uri> didn't change their
functionality but moved into
C<L<Apache::SubRequest|docs::2.0::api::mod_perl-2.0::Apache::SubRequest>>.
Before using them, add:

  use Apache::SubRequest;

=head2 C<$r-E<gt>get_remote_host>

C<$r-E<gt>get_remote_host> has been renamed and moved into the package
C<L<Apache::Connection|docs::2.0::api::mod_perl-2.0::Apache::Connection>>:

  use Apache::Connection;
  $r->connection->get_remote_host();

=head2 C<$r-E<gt>content>

See the next item.

=head2 C<$r-E<gt>args> in an Array Context

C<$r-E<gt>args> in 2.0 returns the query string without parsing and
splitting it into an array. You can also set the query string by
passing a string to this method.

C<$r-E<gt>content> and C<$r-E<gt>args> in an array context were
mistakes that never should have been part of the mod_perl 1.0
API. There multiple reason for that, among others:

=over

=item *

does not handle multi-value keys

=item *

does not handle multi-part content types

=item *

does not handle chunked encoding

=item *

slurps C<$r-E<gt>headers_in-E<gt>{'content-length'}> into a single
buffer (bad for performance, memory bloat, possible dos attack, etc.)

=item *

in general duplicates functionality (and does so poorly) that is done
better in C<Apache::Request>.

=item *

if one wishes to simply read POST data, there is the more modern
C<{setup,should,get}_client_block> API, and even more modern filter
API.  Along with continued support for C<read(STDIN, ...)> and
C<$r-E<gt>read($buf, $r-E<gt>headers_in-E<gt>{'content-length'}>)

=back

Instead you should use C<Apache::Request>'s C<params()> and similar
methods to do the parsing for you. See the C<L<Apache::Request|docs::2.0::api::mod_perl-2.0::Apache::Request>>
manpage.

XXX: ...when Apache::Request will be ported to 2.0. For now you can
use the code in C<Apache::compat> that implements these methods in
Perl.

=head2  C<$r-E<gt>chdir_file>

C<chdir()> is not a thread-safe function, therefore
C<$r-E<gt>chdir_file> is gone from the API.

=head2 C<$r-E<gt>connection-E<gt>user>

This method is deprecated in mod_perl 1.0 and C<$r-E<gt>user> should
be used instead, for both versions of mod_perl. C<$r-E<gt>user()>
method is available since mod_perl version 1.24_01.

=head2 C<$r-E<gt>is_main>

C<$r-E<gt>is_main> is not part of the mod_perl 2.0 API. Use
C<!$r-E<gt>main> instead.

=head2 C<$r-E<gt>finfo>

XXX: not implemented yet. To be implemented. C<Apache::compat> handles
that for now with:

  sub finfo {
      my $r = shift;
      stat $r->filename;
      \*_;
  }

=head2 C<$r-E<gt>header_in>

See the next item.

=head2 C<$r-E<gt>header_out>

See the next item.

=head2 C<$r-E<gt>err_header_out>

C<header_in()>, C<header_out()> and C<err_header_out()> are not
available in 2.0. Use C<headers_in()>, C<headers_out()> and
C<err_headers_out()> instead (which should be used in 1.0 as
well). For example you need to replace:

  $r->err_header_out("Pragma" => "no-cache");

with:

  $r->err_headers_out->{'Pragma'} = "no-cache";

See the L<Apache::RequestRec> manpage.


=head2 C<$r-E<gt>log_reason>

C<$r-E<gt>log_reason> is not available in mod_perl 2.0 API. Use the
other standard logging functions provided by the
C<L<Apache::Log|docs::2.0::api::mod_perl-2.0::Apache::Log>>
module. For example:

  $r->log_error("it works!");

See the C<L<Apache::Log|docs::2.0::api::mod_perl-2.0::Apache::Log>>
manpage.


=head2 C<$r-E<gt>register_cleanup>

C<$r-E<gt>register_cleanup> has been replaced with
C<APR::Pool::cleanup_register()> which accepts the pool object as the
first argument instead of the request object. e.g.:

  sub cleanup_callback { my $data = shift; ... }
  $r->pool->cleanup_register(\&cleanup_callback, $data);

where the last argument C<$data> is optional, and if supplied will be
passed as the first argument to the callback function.

See the L<APR::Pool> manpage.

=head2 C<$r-E<gt>post_connection>

C<$r-E<gt>post_connection> has been replaced with:

  $r->connection->pool->cleanup_register();

See the L<APR::Pool> manpage.


=head2 C<$r-E<gt>request>

Use C<Apache-E<gt>request>.


=head2 C<$r-E<gt>send_fd>

See the next item.

=head2 C<$r-E<gt>send_fd_length>

currently available only in the 1.0 compatibility layer. The problem
is that Apache has changed the API and the its functionality. See the
implementation in C<Apache::compat>.

XXX: needs a better resolution

=head2 C<$r-E<gt>server_root_relative>

C<Apache::server_root_relative> is a function in 2.0.

  my $conf_dir = Apache::server_root_relative($r->pool, 'conf');

See the L<Apache::ServerUtil> manpage.


=head2 C<$r-E<gt>hard_timeout>

See the next item.

=head2 C<$r-E<gt>reset_timeout>

See the next item.

=head2 C<$r-E<gt>soft_timeout>

See the next item.

=head2 C<$r-E<gt>kill_timeout>

The functions C<$r-E<gt>hard_timeout>, C<$r-E<gt>reset_timeout>,
C<$r-E<gt>soft_timeout> and C<$r-E<gt>kill_timeout> aren't needed
in mod_perl 2.0.

=head2 C<$r-E<gt>set_byterange>

See the next item.

=head2 C<$r-E<gt>each_byterange>

The functions C<$r-E<gt>set_byterange> and C<$r-E<gt>each_byterange>
aren't in the Apache 2.0 API, and therefore don't exist in mod_perl
2.0. The byterange serving functionality is now implemented in the
ap_byterange_filter, which is a part of the core http module, meaning
that it's automatically taking care of serving the requested ranges
off the normal complete response. There is no need to configure
it. It's executed only if the appropriate request headers are
set. These headers aren't listed here, since there are several
combinations of them, including the older ones which are still
supported. For a complete info on these see
I<modules/http/http_protocol.c>.


=head1 Apache::File

The methods from mod_perl 1.0's module C<Apache::File> have been
either moved to other packages or removed.

=head2 C<open()> and C<close()>

The methods C<open()> and C<close()> were removed. See the back
compatibility implementation in the module C<Apache::compat>.

=head2 C<tmpfile()>

The method C<tmpfile()> was removed since Apache 2.0 doesn't have the
API for this method anymore.

See C<File::Temp>, or the back compatibility implementation in the
module C<Apache::compat>.

With Perl v5.8.0 you can create anonymous temporary files:

   open $fh, "+>", undef or die $!;

That is a literal C<undef>, not an undefined value.

=head2 C<mtime()>

mtime() now belongs to the module L<Apache::RequestRec>.


=head2 C<discard_request_body()>

This function now belongs to the module
C<L<Apache::Response|docs::2.0::api::mod_perl-2.0::Apache::Response>>.

=head2 C<meets_conditions()>

This function now belongs to the module
C<L<Apache::Response|docs::2.0::api::mod_perl-2.0::Apache::Response>>.

=head2 C<set_content_length()>

This function now belongs to the module
C<L<Apache::Response|docs::2.0::api::mod_perl-2.0::Apache::Response>>.

=head2 C<set_etag()>

This function now belongs to the module
C<L<Apache::Response|docs::2.0::api::mod_perl-2.0::Apache::Response>>.

=head2 C<set_last_modified()>

This function now belongs to the module
C<L<Apache::Response|docs::2.0::api::mod_perl-2.0::Apache::Response>>.

=head2 C<update_mtime()>

This function now belongs to the module
C<L<Apache::Response|docs::2.0::api::mod_perl-2.0::Apache::Response>>.






=head1 C<Apache::Util>

A few C<Apache::Util> functions have changed their interface.

=head2 C<Apache::Util::size_string()>

C<Apache::Util::size_string()> has been replaced with
C<APR::String::format_size()>, which returns formatted strings of only
4 characters long. See the
C<L<APR::String|docs::2.0::api::mod_perl-2.0::APR::String>> manpage.

=head2 C<Apache::Util::escape_uri()>

C<Apache::Util::escape_uri()> has been replaced with
C<Apache::Util::escape_path()> and requires a pool object as a second
argument. For example:

  $escaped_path = Apache::Util::escape_path($path, $r->pool);

=head2 C<Apache::Util::unescape_uri()>

C<Apache::Util::unescape_uri()> has been replaced with
C<Apache::unescape_url()>.

=head2 C<Apache::Util::escape_html()>

C<Apache::Util::escape_html> currently is available only via
C<Apache::compat> until I<ap_escape_html> is reworked to not require a
pool.

=head2 C<Apache::Util::parsedate()>

C<Apache::Util::parsedate()> has been replaced with
C<APR::Date::parse_http()>.

=head2 C<Apache::Util::ht_time()>

C<Apache::Util::ht_time()> has been replaced (temporary?) with
C<Apache::Util::format_time()>, which requires a pool object as a
forth argument. All four arguments are now required.

For example:

   use Apache::Util ();
   $fmt = '%a, %d %b %Y %H:%M:%S %Z';
   $gmt = 1;
   $fmt_time = Apache::Util::format_time(time(), $fmt, $gmt, $r->pool);

See the L<Apache::Util> manpage.


=head2 C<Apache::Util::validate_password()>

C<Apache::Util::validate_password()> has been replaced with
C<APR::password_validate()>. For example:

   my $ok = Apache::Util::validate_password("stas", "ZeO.RAc3iYvpA");






=head1 C<Apache::URI>

=head2 C<Apache::URI-E<gt>parse($r, [$uri])>

C<Apache::URI-E<gt>parse()> has been replaced with
C<APR::URI-E<gt>parse()>, which is invoked as:

  my $curl = $r->construct_url;
  APR::URI->parse($r->pool, $curl);

See the L<APR::URI> manpage.











=head1 Miscellaneous

=head2 Method Handlers

In mod_perl 1.0 the method handlers could be specified by using the
C<($$)> prototype:

  package Bird;
  @ISA = qw(Eagle);
  
  sub handler ($$) {
      my($class, $r) = @_;
      ...;
  }

mod_perl 2.0 doesn't handle callbacks with C<($$)> prototypes
differently than other callbacks (as it did in mod_perl 1.0), mainly
because several callbacks in 2.0 have more arguments than just C<$r>,
so the C<($$)> prototype doesn't make sense anymore. Therefore if you
want your code to work with both mod_perl generations and you can
allow the luxury of:

  require 5.6.0;

or if you need the code to run only on mod_perl 2.0, use the I<method>
subroutine attribute. (The subroutine attributes are supported in Perl
since version 5.6.0.)

Here is the same example rewritten using the I<method> subroutine
attribute:

  package Bird;
  @ISA = qw(Eagle);
  
  sub handler : method {
      my($class, $r) = @_;
      ...;
  }

See the I<attributes> manpage.

If C<Class-E<gt>method> syntax is used for a C<Perl*Handler>, the
C<:method> attribute is not required.





=head1 C<Apache::Table>

C<Apache::Table> has been renamed to C<APR::Table>.



=head1 C<Apache::SIG>

C<Apache::SIG> currently exists only C<Apache::compat> and it does
nothing.



=head1 C<Apache::StatINC>

C<Apache::StatINC> has been replaced by C<Apache::Reload>, which works
for both mod_perl generations. To migrate to C<Apache::Reload> simply
replace:

  PerlInitHandler Apache::StatINC

with:

  PerlInitHandler Apache::Reload

However C<Apache::Reload> provides an extra functionality, covered in
the module's manpage.



=head1 Maintainers

Maintainer is the person(s) you should contact with updates,
corrections and patches.

=over

=item *

Stas Bekman E<lt>stas (at) stason.orgE<gt>

=back

=head1 Authors

=over

=item *

Stas Bekman E<lt>stas (at) stason.orgE<gt>

=back

Only the major authors are listed above. For contributors see the
Changes file.

=cut
