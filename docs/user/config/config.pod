=head1 NAME

mod_perl 2.0 Server Configuration



=head1 Description

This chapter provides an in-depth mod_perl 2.0 configuration details.







=head1 mod_perl configuration directives

Similar to mod_perl 1.0, in order to use mod_perl 2.0 a few
configuration settings should be added to I<httpd.conf>. They are
quite similar to 1.0 settings but some directives were renamed and new
directives were added.









=head1 Enabling mod_perl

To enable mod_perl built as DSO add to I<httpd.conf>:

  LoadModule perl_module modules/mod_perl.so

This setting specifies the location of the mod_perl module relative to
the C<ServerRoot> setting, therefore you should put it somewhere after
C<ServerRoot> is specified.

If mod_perl has been statically linked it's automatically enabled.

Win32 users need to make sure that the path to the Perl binary (e.g.,
I<C:\Perl\bin>) is in the C<PATH> environment variable.





=head1 Accessing the mod_perl 2.0 Modules

In order to prevent from inadvertently loading mod_perl 1.0 modules
mod_perl 2.0 Perl modules are installed into dedicated directories
under I<Apache2/>. The C<Apache2> module prepends the locations of the
mod_perl 2.0 libraries to C<@INC>, which are the same as the core
C<@INC>, but with I<Apache2/> appended. This module has to be loaded
just after mod_perl has been enabled. This can be accomplished with:

  use Apache2 ();

in the startup file. Only if you don't use a startup file you can add:

  PerlModule Apache2

to I<httpd.conf>, due to the order the C<PerlRequire> and
C<PerlModule> directives are processed.






=head1 Startup File

Next usually a startup file with Perl code is loaded:

  PerlRequire "/home/httpd/httpd-2.0/perl/startup.pl"

It's used to adjust Perl modules search paths in C<@INC>, pre-load
commonly used modules, pre-compile constants, etc. Here is a typical
I<startup.pl> for mod_perl 2.0:

  file:startup.pl
  ---------------
  use Apache2 ();
  
  use lib qw(/home/httpd/perl);
  
  # enable if the mod_perl 1.0 compatibility is needed
  # use Apache::compat ();
  
  use ModPerl::Util (); #for CORE::GLOBAL::exit
  
  use Apache::RequestRec ();
  use Apache::RequestIO ();
  use Apache::RequestUtil ();
  
  use Apache::Server ();
  use Apache::ServerUtil ();
  use Apache::Connection ();
  use Apache::Log ();
  
  use APR::Table ();
  
  use ModPerl::Registry ();
  
  use Apache::Const -compile => ':common';
  use APR::Const -compile => ':common';
  
  1;

In this file the C<Apache2> modules is loaded, so the 2.0 modules will
be found. Afterwards C<@INC> in adjusted to include non-standard
directories with Perl modules:

  use lib qw(/home/httpd/perl);

If you need to use the backwards compatibility layer load:

  use Apache::compat ();

Next we preload the commonly used mod_perl 2.0 modules and precompile
common constants.

Finally as usual the I<startup.pl> file must be terminated with C<1;>.






=head1 Perl's Command Line Switches

Now you can pass any Perl's command line switches in I<httpd.conf>
using the C<PerlSwitches> directive. For example to enable warnings
and Taint checking add:

  PerlSwitches -wT

As an alternative to using C<use lib> in I<startup.pl> to adjust
C<@INC>, now you can use the command line switch C<-I> to do that:

  PerlSwitches -I/home/stas/modperl

You could also use C<-Mlib=/home/stas/modperl> which is the exact
equivalent as C<use lib>, but it's broken on certain platforms/version
(e.g. Darwin/5.6.0). C<use lib> is removing duplicated entries,
whereas C<-I> does not.






=head1 mod_perl 2.0 Handlers

mod_perl 2.0 provides two types of handlers: C<modperl> and
C<perl-script>.

=head2 modperl

Configured as:

  SetHandler modperl

The bare mod_perl handler type, which just calls the C<Perl*Handler>'s
callback function. If you don't need the features provided by the
I<perl-script> handler, with the C<modperl> handler, you can gain even
more performance. (This handler isn't available in mod_perl 1.0.)

Unless the C<Perl*Handler> callback running under the C<modperl>
handler is configured with:

  PerlOptions +SetupEnv

or calls:

  $r->subprocess_env;

in a void context (which has the same effect as C<PerlOptions
+SetupEnv> for the handler that called it), only the following
environment variables are accessible via C<%ENV>:

=over

=item *

C<MOD_PERL> and C<GATEWAY_INTERFACE> (always)

=item *

C<PATH> and C<TZ> (if you had them defined in the shell or
I<httpd.conf>)

=back

Therefore if you don't want to add the overhead of populating C<%ENV>,
when you simply want to pass some configuration variables from
I<httpd.conf>, consider using C<PerlSetVar> and C<PerlAddVar> instead
of C<PerlSetEnv> and C<PerlPassEnv>. In your code you can retrieve the
values using the C<dir_config()> method. For example if you set in
I<httpd.conf>:

  <Location /print_env2>
      SetHandler modperl
      PerlResponseHandler Apache::VarTest
      PerlSetVar VarTest VarTestValue
  </Location>

this value can be retrieved inside C<Apache::VarTest::handler()> with:

  $r->dir_config('VarTest');

Alternatively use the Apache core directives C<SetEnv> and C<PassEnv>,
which always populate C<r-E<gt>subprocess_env>, but this doesn't happen
until the Apache I<fixups> phase, which could be too late for your needs.

=head2 perl-script

Configured as:

  SetHandler perl-script

Most mod_perl handlers use the I<perl-script> handler. Among other
things it does:

=over

=item *

C<PerlOptions +GlobalRequest> is in effect unless:

  PerlOptions -GlobalRequest

is specified.

=item *

C<PerlOptions +SetupEnv> is in effect unless:

  PerlOptions -SetupEnv

is specified.

=item *

C<STDOUT> and C<STDOUT> get tied to the request object C<$r>, which
makes possible to read from C<STDIN> and print directly to C<STDOUT>
via C<CORE::print()>, instead of implicit calls like
C<$r-E<gt>puts()>.

=item *

Several special global Perl variables are saved before the handler is
called and restored afterwards (similar to mod_perl 1.0). This
includes: C<%ENV>, C<@INC>, C<$/>, C<STDOUT>'s C<$|> and C<END> blocks
array (C<PL_endav>).

=back









=head1 C<PerlOptions> Directive

The directive C<PerlOptions> provides fine-grained configuration for
what were compile-time only options in the first mod_perl generation.
It also provides control over what class of C<PerlInterpreter> is used
for a C<E<lt>VirtualHostE<gt>> or location configured with
C<E<lt>LocationE<gt>>, C<E<lt>DirectoryE<gt>>, etc.

Options are enabled by prepending C<+> and disabled with C<->. The
options include:

=head2 C<Enable>

On by default, can be used to disable mod_perl for a given
C<VirtualHost>. For example:

  <VirtualHost ...>
      PerlOptions -Enable
  </VirtualHost>

=head2 C<Clone>

Share the parent Perl interpreter, but give the C<VirtualHost> its own
interpreter pool. For example should you wish to fine tune interpreter
pools for a given virtual host:

  <VirtualHost ...>
      PerlOptions +Clone
      PerlInterpStart 2
      PerlInterpMax 2
  </VirtualHost>

This might be worthwhile in the case where certain hosts have their
own sets of large-ish modules, used only in each host.  By tuning each 
host to have its own pool, that host will continue to reuse the Perl
allocations in their specific modules.

When cloning a Perl interpreter, to inherit base Perl interpreter's
C<PerlSwitches> use:

  <VirtualHost ...>
      ...
      PerlSwitches +inherit
  </VirtualHost>


=head2 C<Parent>

Create a new parent Perl interpreter for the given C<VirtualHost> and
give it its own interpreter pool (implies the C<Clone> option).

A common problem with mod_perl 1.0 was the shared namespace between
all code within the process.  Consider two developers using the same
server and each wants to run a different version of a module with the
same name.  This example will create two I<parent> Perl interpreters,
one for each C<E<lt>VirtualHostE<gt>>, each with its own namespace and
pointing to a different paths in C<@INC>:

META: is -Mblib portable? (problems with -Mlib on Darwin/5.6.0?)

  <VirtualHost ...>
      ServerName dev1
      PerlOptions +Parent
      PerlSwitches -Mblib=/home/dev1/lib/perl
  </VirtualHost>

  <VirtualHost ...>
      ServerName dev2
      PerlOptions +Parent
      PerlSwitches -Mblib=/home/dev2/lib/perl
  </VirtualHost>

Or even for a given location, for something like "dirty" cgi scripts:

  <Location /cgi-bin>
      PerlOptions +Parent
      PerlInterpMaxRequests 1
      PerlInterpStart 1
      PerlInterpMax 1
      PerlResponseHandler ModPerl::Registry
  </Location>

will use a fresh interpreter with its own namespace to handle each
request.

=head2 C<Perl*Handler>

Disable C<Perl*Handler>s, all compiled-in handlers are enabled by
default. The option name is derived from the C<Perl*Handler> name, by
stripping the C<Perl> and C<Handler> parts of the word. So
C<PerlLogHandler> becomes C<Log> which can be used to disable
C<PerlLogHandler>:

  PerlOptions -Log

Suppose one of the hosts does not want to allow users to configure
C<PerlAuthenHandler>, C<PerlAuthzHandler>, C<PerlAccessHandler> and
E<lt>PerlE<gt> sections:

  <VirtualHost ...>
      PerlOptions -Authen -Authz -Access -Sections
  </VirtualHost>

Or maybe everything but the response handler:

  <VirtualHost ...>
      PerlOptions None +Response
  </VirtualHost>

=head2 C<AutoLoad>

Resolve C<Perl*Handlers> at startup time, which includes loading the
modules from disk if not already loaded.

In mod_perl 1.0, configured C<Perl*Handlers> which are not a fully
qualified subroutine names are resolved at request time, loading the
handler module from disk if needed.  In mod_perl 2.0, configured
C<Perl*Handlers> are resolved at startup time.  By default, modules
are not auto-loaded during startup-time resolution.  It is possible to
enable this feature with:

  PerlOptions +Autoload

Consider this configuration:

  PerlResponseHandler Apache::Magick

In this case, C<Apache::Magick> is the package name, and the
subroutine name will default to I<handler>.  If the C<Apache::Magick>
module is not already loaded, C<PerlOptions +Autoload> will attempt to
pull it in at startup time. With this option enabled you don't have to
explicitly load the handler modules. For example you don't need to
add:

  PerlModule Apache::Magick

in our example.

=head2 C<GlobalRequest>

Setup the global C<request_rec> for use with C<Apache-E<gt>request>.
This setting is needed for example if you use C<CGI.pm> to process the
incoming request.

This setting is enabled by default for sections configured as:

  <Location ...>
      SetHandler perl-script
      ...
  </Location>

And can be disabled with:

  <Location ...>
      SetHandler perl-script
      PerlOptions -GlobalRequest
      ...
  </Location>



=head2 C<ParseHeaders>

Scan output for HTTP headers, same functionality as mod_perl 1.0's
C<PerlSendHeader>, but more robust. This option is usually needs to
be enabled for registry scripts which send the HTTP header with:

  print "Content-type: text/html\n\n";

=head2 C<MergeHandlers>

Turn on merging of C<Perl*Handler> arrays. For example with a setting:

  PerlFixupHandler Apache::FixupA
  
  <Location /inside>
      PerlFixupHandler Apache::FixupB
  </Location>

a request for I</inside> only runs C<Apache::FixupB> (mod_perl 1.0
behavior). But with this configuration:

  PerlFixupHandler Apache::FixupA
  
  <Location /inside>
      PerlOptions +MergeHandlers
      PerlFixupHandler Apache::FixupB
  </Location>

a request for I</inside> will run both C<Apache::FixupA> and
C<Apache::FixupB> handlers.


=head2 C<SetupEnv>

Set up environment variables for each request ala mod_cgi. 

When this option is enabled, I<mod_perl> fiddles with the environment
to make it appear as if the code is called under the mod_cgi handler.
For example, the C<$ENV{QUERY_STRING}> environment variable is
initialized with the contents of I<Apache::args()>, and the value
returned by I<Apache::server_hostname()> is put into
C<$ENV{SERVER_NAME}>.

But C<%ENV> population is expensive.  Those who have moved to the Perl
Apache API no longer need this extra C<%ENV> population, and can gain
by disabling it. A code using the C<CGI.pm> module require
C<PerlOptions +SetupEnv> because that module relies on a properly populated
CGI environment table.

This option is enabled by default for sections configured as:

  <Location ...>
      SetHandler perl-script
      ...
  </Location>

Since this option adds an overhead to each request, if you don't need
this functionality you can turn it off for a certain section:

  <Location ...>
      SetHandler perl-script
      PerlOptions -SetupEnv
      ...
  </Location>

or globally:

  PerlOptions -SetupEnv
  <Location ...>
      ...
  </Location>

and then it'll affect the whole server. It can still be enabled for
sections that need this functionality.

When this option is disabled you can still read environment variables
set by you.  For example when you use the following configuration:

  PerlOptions -SetupEnv
  PerlModule Modperl::Registry
  <Location /perl>
    PerlSetEnv TEST hi
    SetHandler perl-script
    PerlHandler ModPerl::Registry
    Options +ExecCGI
  </Location>

and you issue a request for this script:

  setupenvoff.pl
  --------------
  use Data::Dumper;
  my $r = Apache->request();
  $r->send_http_header('text/plain');
  print Dumper(\%ENV);

you should see something like this:

  $VAR1 = {
            'GATEWAY_INTERFACE' => 'CGI-Perl/1.1',
            'MOD_PERL' => 'mod_perl/2.0.1',
            'PATH' => 'bin:/usr/bin',
            'TEST' => 'hi'
          };

Notice that we have got the value of the environment variable I<TEST>.










=head1 Handlers Directives

See L<The handlers chapters|docs::2.0::user::handlers::index>.










=head1 Threads Mode Specific Directives

These directives are enabled only in a threaded mod_perl+Apache combo:

=head2 C<PerlInterpStart>

The number of interpreters to clone at startup time.

=head2 C<PerlInterpMax>

If all running interpreters are in use, mod_perl will clone new
interpreters to handle the request, up until this number of
interpreters is reached. when C<PerlInterpMax> is reached, mod_perl
will block (via COND_WAIT()) until one becomes available (signaled via
COND_SIGNAL()).

=head2 C<PerlInterpMinSpare>

The minimum number of available interpreters this parameter will clone
interpreters up to C<PerlInterpMax>, before a request comes in.

=head2 C<PerlInterpMaxSpare>

mod_perl will throttle down the number of interpreters to this number
as those in use become available.

=head2 C<PerlInterpMaxRequests>

The maximum number of requests an interpreter should serve, the
interpreter is destroyed when the number is reached and replaced with
a fresh clone.

=head2 C<PerlInterpScope>

As mentioned, when a request in a threaded mpm is handled by mod_perl,
an interpreter must be pulled from the interpreter pool.  The
interpreter is then only available to the thread that selected it,
until it is released back into the interpreter pool.  By default, an
interpreter will be held for the lifetime of the request, equivalent
to this configuration:

  PerlInterpScope request

For example, if a C<PerlAccessHandler> is configured, an interpreter
will be selected before it is run and not released until after the
logging phase.

Interpreters will be shared across sub-requests by default, however, it
is possible to configure the interpreter scope to be per-sub-request on
a per-directory basis:

  PerlInterpScope subrequest

With this configuration, an autoindex generated page, for example,
would select an interpreter for each item in the listing that is
configured with a Perl*Handler.

It is also possible to configure the scope to be per-handler:

  PerlInterpScope handler

With this configuration, an interpreter will be selected before
C<PerlAccessHandlers> are run, and put back immediately afterwards,
before Apache moves onto the authentication phase.  If a
C<PerlFixupHandler> is configured further down the chain, another
interpreter will be selected and again put back afterwards, before
C<PerlResponseHandler> is run.

For protocol handlers, the interpreter is held for the lifetime of the
connection.  However, a C protocol module might hook into mod_perl
(e.g. mod_ftp) and provide a C<request_rec> record.  In this case, the
default scope is that of the request.  Should a mod_perl handler want
to maintain state for the lifetime of an ftp connection, it is
possible to do so on a per-virtualhost basis:

  PerlInterpScope connection









=head1 mod_perl Directives Argument Types and Allowed Location

The following table shows where in the configuration files mod_perl
configuration directives are allowed to appear, what kind and how many
arguments they expect:

General directives:

    Directive                 Arguments  Scope
  --------------------------------------------
  PerlSwitches                 ITERATE    SRV
  PerlRequire                  ITERATE    SRV
  PerlModule                   ITERATE    SRV
  PerlOptions                  ITERATE    DIR
  PerlSetVar                   TAKE2      DIR
  PerlAddVar                   ITERATE2   DIR
  PerlSetEnv                   TAKE2      DIR
  PerlPassEnv                  TAKE1      SRV
  <Perl> Sections              RAW_ARGS   SRV
  PerlTrace                    TAKE1      SRV

Handler assignment directives:

    Directive                 Arguments  Scope
  --------------------------------------------
  PerlOpenLogsHandler          ITERATE    SRV
  PerlPostConfigHandler        ITERATE    SRV
  PerlChildInitHandler         ITERATE    SRV

  PerlPreConnectionHandler     ITERATE    SRV
  PerlProcessConnectionHandler ITERATE    SRV
  
  PerlPostReadRequestHandler   ITERATE    SRV
  PerlTransHandler             ITERATE    SRV
  PerlInitHandler              ITERATE    DIR
  PerlHeaderParserHandler      ITERATE    DIR
  PerlAccessHandler            ITERATE    DIR
  PerlAuthenHandler            ITERATE    DIR
  PerlAuthzHandler             ITERATE    DIR
  PerlTypeHandler              ITERATE    DIR
  PerlFixupHandler             ITERATE    DIR
  PerlResponseHandler          ITERATE    DIR
  PerlLogHandler               ITERATE    DIR
  PerlCleanupHandler           ITERATE    DIR
  
  PerlInputFilterHandler       ITERATE    DIR
  PerlOutputFilterHandler      ITERATE    DIR

Perl Interpreter management directives:

    Directive                 Arguments  Scope
  --------------------------------------------
  PerlInterpStart              TAKE1      SRV
  PerlInterpMax                TAKE1      SRV
  PerlInterpMinSpare           TAKE1      SRV
  PerlInterpMaxSpare           TAKE1      SRV
  PerlInterpMaxRequests        TAKE1      SRV
  PerlInterpScope              TAKE1      DIR

mod_perl 1.0 back-compatibility directives:

    Directive                 Arguments  Scope
  --------------------------------------------
  PerlHandler                   ITERATE   DIR
  PerlSendHeader                FLAG      DIR
  PerlSetupEnv                  FLAG      DIR
  PerlTaintCheck                FLAG      SRV
  PerlWarn                      FLAG      SRV

The I<Arguments> column represents the type of arguments directives
accepts, where:

=over

=item ITERATE

Expects a list of arguments.

=item ITERATE2

Expects one argument, followed by at least one or more arguments.

=item TAKE1

Expects one argument only.

=item TAKE2

Expects two arguments only.

=item FLAG

One of C<On> or C<Off> (case insensitive).

=item RAW_ARGS

The function parses the command line by itself.

=back

The I<Scope> column shows the location the directives are allowed to
appear in:

=over

=item SRV

Global configuration and C<E<lt>VirtualHostE<gt>> (mnemonic:
I<SeRVer>). These directives are defined as C<RSRC_CONF> in the source
code.

=item DIR

C<E<lt>DirectoryE<gt>>, C<E<lt>LocationE<gt>>, C<E<lt>FilesE<gt>> and
all their regular expression variants (mnemonic: I<DIRectory>). These
directives can also appear in I<.htaccess> files.  These directives
are defined as C<OR_ALL> in the source code.

These directives can also appear in the global server configuration
and C<E<lt>VirtualHostE<gt>>.

=back

Apache specifies other allowed location types which are currently not
used by the core mod_perl directives and their definition can be found
in I<include/httpd_config.h> (hint: search for C<RSRC_CONF>).

Also see L<Single Phase's Multiple Handlers
Behavior|docs::2.0::user::handlers::intro/Single_Phase_s_Multiple_Handlers_Behavior>.




=head1 Server Startup Options Retrieval

Inside I<httpd.conf> one can do conditional configuration based on the
define options passed at the server startup. For example:

  <IfDefine PERLDB>
      <Perl>
          use Apache::DB ();
          Apache::DB->init;
      </Perl>
    
      <Location />
          PerlFixupHandler Apache::DB
      </Location>
  </IfDefine>

So only when the server is started as:

  % httpd C<-DPERLDB> ...

The configuration inside C<IfDefine> will have an effect. If you want
to have some configuration section to have an effect if a certain
define wasn't defined use C<!>, for example here is the opposite of
the previous example:

  <IfDefine !PERLDB>
      # ...
  </IfDefine>

If you need to access any of the startup defines in the Perl code you
use C<Apache::exists_config_define>. For example in a startup file you
can say:

  use Apache::ServerUtil ();
  if (Apache::exists_config_define("PERLDB")) {
      require Apache::DB;
      Apache::DB->init;
  }

For example to check whether the server has been started in a single
mode use:

  if (Apache::exists_config_define("ONE_PROCESS")) {
      print "Running in a single mode";
  }

=head2 MODPERL2 Define Option

When running under mod_perl 2.0 a special configuration define
C<MODPERL2> is enabled internally, as if the server had been started
with C<-DMODPERL2>. For example this can be used to write a
configuration file which needs to do something different whether it's
running under mod_perl 1.0 or 2.0:

 <IfDefine MODPERL2>
     # 2.0 configuration
 </IfDefine>
 <IfDefine !MODPERL2>
     # else
 </IfDefine>

From within Perl code this can be tested with
C<Apache::exists_config_define()>, for example:

  if (Apache::exists_config_define("MODPERL2")) {
      # some 2.0 specific code
  }





=head1 Perl Interface to the Apache Configuration Tree

META:

Apache::Directive

t/response/TestApache/conftree.pm








=head1 Debug Directives

=head2 C<PerlTrace [level]>

set the trace level. This directive is enabled when mod_perl is
compiled with the MP_TRACE option. C<level> is either:

  all

which sets maximum logging and debugging levels;

a combination of one or more option letters (or option numerical
equivalents) from the following list:

  d (  1) directive processing
  f (  2) filters
  g (  4) Perl runtime interaction
  h (  8) handlers
  i ( 16) interpreter pool management
  m ( 32) memory allocations
  s ( 64) perl sections
  t (128) benchmark-ish timings

When C<level> is not specified, the tracing level will be set to the
value of the MOD_PERL_TRACE environment variable.







=head1 Maintainers

Maintainer is the person(s) you should contact with updates,
corrections and patches.

=over

=item *

Doug MacEachern E<lt>dougm (at) covalent.netE<gt>

=item *

Stas Bekman E<lt>stas (at) stason.orgE<gt>

=back

=head1 Authors

=over

=item *

Doug MacEachern E<lt>dougm (at) covalent.netE<gt>

=back

Only the major authors are listed above. For contributors see the
Changes file.

=cut
