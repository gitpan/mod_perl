=head1 NAME

Apache::Server - Perl API for for Apache server record accessors




=head1 Synopsis

  use Apache::Server ();

META: to be completed




=head1 Description

META: to be completed




=head1 API

C<Apache::Server> provides the following functions and/or methods:




=head2 C<process>

META: Autogenerated - needs to be reviewed/completed

The process this server is running in

  $proc = $s->process();

=over 4

=item obj: C<$s> (C<L<Apache::Server|docs::2.0::api::Apache::Server>>)

=item ret: C<$proc> (C<L<Apache::Process|docs::2.0::api::Apache::Process>>)

=back





=head2 C<next>

META: Autogenerated - needs to be reviewed/completed

The next server in the list (if there are vhosts)

  $next_s = $s->next();

=over 4

=item obj: C<$s> (C<L<Apache::Server|docs::2.0::api::Apache::Server>>)

=item ret: C<$next_s> (C<L<Apache::Server|docs::2.0::api::Apache::Server>>)

=back

For example the following code traverses all the servers, starting
from the base server and continuing to vhost servers, counting all
vhosts:

    use Apache::Server ();
    use Apache::ServerUtil ();
    my $server = Apache->server;
    my $vhosts = 0;
    for (my $s = $server->next; $s; $s = $s->next) {
        $vhosts++;
    }




=head2 C<server_admin>

Get/set the server admin value

  $server_admin = $s->server_admin();
  $prev_server_admin = $s->server_admin($new_server_admin);

=over 4

=item obj: C<$s> (C<L<Apache::Server|docs::2.0::api::Apache::Server>>)

=item opt arg2: C<$new_server_admin> (string)

If passed, sets the new server_admin.

=item ret: C<$server_admin> (string)

Returns the server_admin setting.

If C<$new_server_admin> is passed returns the setting before the
change.

=back





=head2 C<server_hostname>

Get/set the server hostname value

  $server_hostname = $s->server_hostname();
  $prev_server_hostname = $s->server_hostname($new_server_hostname);

=over 4

=item obj: C<$s> (C<L<Apache::Server|docs::2.0::api::Apache::Server>>)

=item opt arg2: C<$new_server_hostname> (string)

If passed, sets the new server_hostname.

=item ret: C<$server_hostname> (string)

Returns the server_hostname setting.

If C<$new_server_hostname> is passed returns the setting before the
change.

=back




=head2 C<port>

META: Autogenerated - needs to be reviewed/completed


Get/set the port value

  $port = $s->port();
  $prev_port = $s->port($new_port);

=over 4

=item obj: C<$s> (C<L<Apache::Server|docs::2.0::api::Apache::Server>>)

=item opt arg2: C<$new_port> (string)

If passed, sets the new port.

=item ret: C<$port> (string)

Returns the port setting.

If C<$new_port> is passed returns the setting before the change.

=back





=head2 C<error_fname>

META: Autogenerated - needs to be reviewed/completed


Get/set the error_fname value

  $error_fname = $s->error_fname();
  $prev_error_fname = $s->error_fname($new_error_fname);

=over 4

=item obj: C<$s> (C<L<Apache::Server|docs::2.0::api::Apache::Server>>)

=item opt arg2: C<$new_error_fname> (string)

If passed, sets the new error_fname.

=item ret: C<$error_fname> (string)

Returns the error_fname setting.

If C<$new_error_fname> is passed returns the setting before the change.

=back






=head2 C<loglevel>

META: Autogenerated - needs to be reviewed/completed

Get/set the log level value

  $loglevel = $s->loglevel();
  $prev_loglevel = $s->loglevel($new_loglevel);

=over 4

=item obj: C<$s> (C<L<Apache::Server|docs::2.0::api::Apache::Server>>)

=item opt arg2: C<$new_loglevel> (string)

If passed, sets the new loglevel.

=item ret: C<$loglevel> (string)

Returns the loglevel setting.

If C<$new_loglevel> is passed returns the setting before the change.

=back



=head2 C<is_virtual>

META: Autogenerated - needs to be reviewed/completed



Get/set the is_virtual value

  $is_virtual = $s->is_virtual();
  $prev_is_virtual = $s->is_virtual($new_is_virtual);

=over 4

=item obj: C<$s> (C<L<Apache::Server|docs::2.0::api::Apache::Server>>)

=item opt arg2: C<$new_is_virtual> (string)

If passed, sets the new is_virtual.

META: this is wrong, it should be a read only accessor

=item ret: C<$is_virtual> (string)

Returns the is_virtual setting.

If C<$new_is_virtual> is passed returns the setting before the change.

=back




=head2 C<module_config>

META: Autogenerated - needs to be reviewed/completed

Get/set config vector containing pointers to modules' per-server
config structures.

  $module_config = $s->module_config();
  $prev_module_config = $s->module_config($new_module_config);

=over 4

=item obj: C<$s> (C<L<Apache::Server|docs::2.0::api::Apache::Server>>)

=item opt arg2: C<new_module_config> (C<L<Apache::ConfVector|docs::2.0::api::Apache::ConfVector>>)

If passed, sets the new module_config.

=item ret: C<$module_config> (C<L<Apache::ConfVector|docs::2.0::api::Apache::ConfVector>>)

Returns the module_config setting.

If C<$new_module_config> is passed returns the setting before the change.

=back




=head2 C<lookup_defaults>

META: Autogenerated - needs to be reviewed/completed

Get/set the lookup_defaults value.  MIME type info, etc., before we
start checking per-directory info.

  $lookup_defaults = $s->lookup_defaults();
  $prev_lookup_defaults = $s->lookup_defaults($new_lookup_defaults);

=over 4

=item obj: C<$s> (C<L<Apache::Server|docs::2.0::api::Apache::Server>>)

=item opt arg2: C<$new_lookup_defaults> (C<L<Apache::ConfVector|docs::2.0::api::Apache::ConfVector>>)

If passed, sets the new lookup_defaults.

=item ret: C<$lookup_defaults> (C<L<Apache::ConfVector|docs::2.0::api::Apache::ConfVector>>)

Returns the lookup_defaults setting.

If C<$new_lookup_defaults> is passed returns the setting before the change.

=back




=head2 C<addrs>

META: Autogenerated - needs to be reviewed/completed


Get/set the addrs value

  $addrs = $s->addrs();
  $prev_addrs = $s->addrs($new_addrs);

=over 4

=item obj: C<$s> (C<L<Apache::Server|docs::2.0::api::Apache::Server>>)

=item opt arg2: C<$new_addrs> (C<L<Apache::ServerAddr|docs::2.0::api::Apache::ServerAddr>>)

If passed, sets the new addrs.

=item ret: C<$addrs> (C<L<Apache::ServerAddr|docs::2.0::api::Apache::ServerAddr>>)

Returns the addrs setting.

If C<$new_addrs> is passed returns the setting before the change.

=back





=head2 C<timeout>

META: Autogenerated - needs to be reviewed/completed

Get/set the timeout, as an apr interval, before we give up

  $timeout = $s->timeout();
  $prev_timeout = $s->timeout($new_timeout);

=over 4

=item obj: C<$s> (C<L<Apache::Server|docs::2.0::api::Apache::Server>>)

=item opt arg2: C<$new_timeout> (string)

If passed, sets the new timeout.

=item ret: C<$timeout> (string)

Returns the timeout setting.

If C<$new_timeout> is passed returns the setting before the change.

=back





=head2 C<keep_alive_timeout>

META: Autogenerated - needs to be reviewed/completed

Get/set the apr interval we will wait for another request

  $keep_alive_timeout = $s->keep_alive_timeout();
  $prev_keep_alive_timeout = $s->keep_alive_timeout($new_keep_alive_timeout);

=over 4

=item obj: C<$s> (C<L<Apache::Server|docs::2.0::api::Apache::Server>>)

=item opt arg2: C<$new_keep_alive_timeout> (string)

If passed, sets the new keep_alive_timeout.

=item ret: C<$keep_alive_timeout> (string)

Returns the keep_alive_timeout setting.

If C<$new_keep_alive_timeout> is passed returns the setting before the change.

=back



=head2 C<keep_alive_max>

META: Autogenerated - needs to be reviewed/completed

Get/set maximum requests per connection

  $keep_alive_max = $s->keep_alive_max();
  $prev_keep_alive_max = $s->keep_alive_max($new_keep_alive_max);

=over 4

=item obj: C<$s> (C<L<Apache::Server|docs::2.0::api::Apache::Server>>)

=item opt arg2: C<$new_keep_alive_max> (string)

If passed, sets the new keep_alive_max.

=item ret: C<$keep_alive_max> (string)

Returns the keep_alive_max setting.

If C<$new_keep_alive_max> is passed returns the setting before the change.

=back


=head2 C<keep_alive>

META: Autogenerated - needs to be reviewed/completed

Use persistent connections?

  $keep_alive = $s->keep_alive();
  $prev_keep_alive = $s->keep_alive($new_keep_alive);

=over 4

=item obj: C<$s> (C<L<Apache::Server|docs::2.0::api::Apache::Server>>)

=item opt arg2: C<$new_keep_alive> (string)

If passed, sets the new keep_alive.

=item ret: C<$keep_alive> (string)

Returns the keep_alive setting.

If C<$new_keep_alive> is passed returns the setting before the change.

=back



=head2 C<path>

META: Autogenerated - needs to be reviewed/completed

Get/set pathname for ServerPath

  $path = $s->path();
  $prev_path = $s->path($new_path);

=over 4

=item obj: C<$s> (C<L<Apache::Server|docs::2.0::api::Apache::Server>>)

=item opt arg2: C<$new_path> (string)

If passed, sets the new path.

=item ret: C<$path> (string)

Returns the path setting.

If C<$new_path> is passed returns the setting before the change.

=back




=head2 C<names>

META: Autogenerated - needs to be reviewed/completed

Get/set normal names for ServerAlias servers

  $names = $s->names();
  $prev_names = $s->names($new_names);

=over 4

=item obj: C<$s> (C<L<Apache::Server|docs::2.0::api::Apache::Server>>)

=item opt arg2: C<$new_names> (C<L<APR::ArrayHeader|docs::2.0::api::APR::ArrayHeader>>)

If passed, sets the new names.

=item ret: C<$names> (C<L<APR::ArrayHeader|docs::2.0::api::APR::ArrayHeader>>)

Returns the names setting.

If C<$new_names> is passed returns the setting before the change.

=back





=head2 C<wild_names>

META: Autogenerated - needs to be reviewed/completed

Wildcarded names for ServerAlias servers

  $wild_names = $s->wild_names();
  $prev_wild_names = $s->wild_names($new_wild_names);

=over 4

=item obj: C<$s> (C<L<Apache::Server|docs::2.0::api::Apache::Server>>)

=item opt arg2: C<$new_wild_names> (C<L<APR::ArrayHeader|docs::2.0::api::APR::ArrayHeader>>)

If passed, sets the new wild_names.

=item ret: C<$wild_names> (C<L<APR::ArrayHeader|docs::2.0::api::APR::ArrayHeader>>)

Returns the wild_names setting.

If C<$new_wild_names> is passed returns the setting before the change.

=back




=head2 C<limit_req_line>

META: Autogenerated - needs to be reviewed/completed

Get/set limit on size of the HTTP request line

  $limit_req_line = $s->limit_req_line();
  $prev_limit_req_line = $s->limit_req_line($new_limit_req_line);

=over 4

=item obj: C<$s> (C<L<Apache::Server|docs::2.0::api::Apache::Server>>)

=item opt arg2: C<$new_limit_req_line> (string)

If passed, sets the new limit_req_line.

=item ret: C<$limit_req_line> (string)

Returns the limit_req_line setting.

If C<$new_limit_req_line> is passed returns the setting before the
change.

=back


=head2 C<limit_req_fieldsize>

META: Autogenerated - needs to be reviewed/completed

limit on size of any request header field

  $limit_req_fieldsize = $s->limit_req_fieldsize();
  $prev_limit_req_fieldsize = $s->limit_req_fieldsize($new_limit_req_fieldsize);

=over 4

=item obj: C<$s> (C<L<Apache::Server|docs::2.0::api::Apache::Server>>)

=item opt arg2: C<$new_limit_req_fieldsize> (string)

If passed, sets the new limit_req_fieldsize.

=item ret: C<$limit_req_fieldsize> (string)

Returns the limit_req_fieldsize setting.

If C<$new_limit_req_fieldsize> is passed returns the setting before
the change.

=back




=head2 C<limit_req_fields>

META: Autogenerated - needs to be reviewed/completed

Get/set limit on number of request header fields

  $limit_req_fields = $s->limit_req_fields();
  $prev_limit_req_fields = $s->limit_req_fields($new_limit_req_fields);

=over 4

=item obj: C<$s> (C<L<Apache::Server|docs::2.0::api::Apache::Server>>)

=item opt arg2: C<$new_limit_req_fields> (string)

If passed, sets the new limit_req_fields.

=item ret: C<$limit_req_fields> (string)

Returns the limit_req_fields setting.

If C<$new_limit_req_fields> is passed returns the setting before the change.

=back



=head1 See Also

L<mod_perl 2.0 documentation|docs::2.0::index>.




=head1 Copyright

mod_perl 2.0 and its core modules are copyrighted under
The Apache Software License, Version 1.1.




=head1 Authors

L<The mod_perl development team and numerous
contributors|about::contributors::people>.

=cut

