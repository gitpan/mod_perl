=head1 NAME

APR::Bucket - Perl API for XXX




=head1 Synopsis

  use APR::Bucket ();

META: to be completed




=head1 Description

META: to be completed




=head1 API

C<APR::Bucket> provides the following functions and/or methods:




=head2 C<eos_create>

META: Autogenerated - needs to be reviewed/completed

Each bucket type foo has two initialization functions:
apr_bucket_foo_make which sets up some already-allocated memory as a
bucket of type foo; and apr_bucket_foo_create which allocates memory
for the bucket, calls apr_bucket_make_foo, and initializes the
bucket's list pointers. The apr_bucket_foo_make functions are used
inside the bucket code to change the type of buckets in place;
other code should call apr_bucket_foo_create. All the initialization
functions change nothing if they fail. *

Create an End of Stream bucket.  This indicates that there is no more
data coming from down the filter stack.  All filters should flush at
this point.

  $ret = $list->eos_create();

=over 4

=item arg1: C<$list> (C<L<APR::BucketAlloc|docs::2.0::api::APR::BucketAlloc>>)

The freelist from which this bucket should be allocated

=item ret: C<$ret> (C<L<APR::Bucket|docs::2.0::api::APR::Bucket>>)

The new bucket, or NULL if allocation failed

=back





=head2 C<flush_create>

META: Autogenerated - needs to be reviewed/completed

Create a flush  bucket.  This indicates that filters should flush their
data.  There is no guarantee that they will flush it, but this is the
best we can do.

  $ret = $list->flush_create();

=over 4

=item arg1: C<$list> (C<L<APR::BucketAlloc|docs::2.0::api::APR::BucketAlloc>>)

The freelist from which this bucket should be allocated

=item ret: C<$ret> (C<L<APR::Bucket|docs::2.0::api::APR::Bucket>>)

The new bucket, or NULL if allocation failed

=back





=head2 C<insert_after>

META: Autogenerated - needs to be reviewed/completed



  $a->insert_after($b);

=over 4

=item arg1: C<$a> (C<L<APR::Bucket|docs::2.0::api::APR::Bucket>>)



=item arg2: C<$b> (C<L<APR::Bucket|docs::2.0::api::APR::Bucket>>)



=item ret: no return value

=back





=head2 C<insert_before>

META: Autogenerated - needs to be reviewed/completed



  $a->insert_before($b);

=over 4

=item arg1: C<$a> (C<L<APR::Bucket|docs::2.0::api::APR::Bucket>>)



=item arg2: C<$b> (C<L<APR::Bucket|docs::2.0::api::APR::Bucket>>)



=item ret: no return value

=back





=head2 C<is_eos>

META: Autogenerated - needs to be reviewed/completed



  $ret = $bucket->is_eos();

=over 4

=item arg1: C<$bucket> (C<L<APR::Bucket|docs::2.0::api::APR::Bucket>>)



=item ret: C<$ret> (integer)



=back





=head2 C<is_flush>

META: Autogenerated - needs to be reviewed/completed



  $ret = $bucket->is_flush();

=over 4

=item arg1: C<$bucket> (C<L<APR::Bucket|docs::2.0::api::APR::Bucket>>)



=item ret: C<$ret> (integer)



=back





=head2 C<remove>

META: Autogenerated - needs to be reviewed/completed



  $bucket->remove();

=over 4

=item arg1: C<$bucket> (C<L<APR::Bucket|docs::2.0::api::APR::Bucket>>)



=item ret: no return value

=back




=head1 See Also

L<mod_perl 2.0 documentation|docs::2.0::index>.




=head1 Copyright

mod_perl 2.0 and its core modules are copyrighted under
The Apache Software License, Version 1.1.




=head1 Authors

L<The mod_perl development team and numerous
contributors|about::contributors::people>.

=cut

